(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{326:function(t,s,a){"use strict";a.r(s);var e=a(13),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("我们平常在使用 "),a("code",[t._v("Vue")]),t._v(" 开发项目的时候，肯定是会使用一些组件库或者全局组件，但是有些全局组件或者组件库中的组件的初始 "),a("code",[t._v("props")]),t._v(" 属性没有默认值或者设定默认值不是我们想要的，这就使得我们需要在具体使用组件的地方为其设置一些我们期望的值。这里以 "),a("code",[t._v("Element")]),t._v(" 组件库为例，比如我们在项目中使用 "),a("code",[t._v("Table")]),t._v(" 组件，整个项目的表格设计都是带边框的，但是 "),a("code",[t._v("Table")]),t._v(" 组件默认是不带 border 的，所以我们需要在每个使用 "),a("code",[t._v("Table")]),t._v(" 组件的地方手动将 border 设为 "),a("code",[t._v("true")]),t._v("。这么做或许有些许麻烦，因此我实现了一个插件： "),a("code",[t._v("VueSetProps")]),t._v("，使用它对于统一的属性值或者大多数需要设置的属性值你不需要在每一处使用时单独设置了，你只需要在初始化的时候统一设置，后面使用的所有组件都会生效。当然，如果你在某处不希望使用设置的全局默认属性，只需要在具体使用的时候设置值覆盖默认值即可。")]),t._v(" "),a("p",[t._v("下面是 "),a("code",[t._v("VueSetProps")]),t._v(" 具体使用方式：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i vue-set-props -S\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" vue-set-props\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// main.js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Vue "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vue'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" ElementUI "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'element-ui'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" VueSetProps "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vue-set-props'")]),t._v("\n\nVue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("use")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ElementUI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 必须在组件库或全局组件注册后使用")]),t._v("\nVue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("use")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("VueSetProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  ElInput"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    clearable"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  ElButton"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    round"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 其他全局组件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n")])])]),a("p",[t._v("经过上面的初始化设置，在使用 "),a("code",[t._v("Input")]),t._v(" 组件时都会带上可清除的图标，"),a("code",[t._v("Table")]),t._v(" 组件时都会带上表格边框，不需要在具体使用时单独设置。具体使用细节可以参考"),a("a",{attrs:{href:"https://github.com/markyong/vue-set-props",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("其实 "),a("code",[t._v("VueSetProps")]),t._v(" 的原理很简单，就是根据对应组件找到对应的 "),a("code",[t._v("props")]),t._v(" 设置通过修改或添加 "),a("code",[t._v("default")]),t._v(" 属性设置默认值。可以这么做得益于 "),a("code",[t._v("Vue")]),t._v(" 内部对应 "),a("code",[t._v("props")]),t._v(" 属性的规范化。这里还是以 "),a("code",[t._v("Element")]),t._v(" 为例，在 "),a("code",[t._v("Vue.use(ElementUI)")]),t._v(" 调用时，内部其实是调用 "),a("code",[t._v("Vue.component()")]),t._v(" 将一个个组件挂载到全局，而调用此方法时，"),a("code",[t._v("Vue")]),t._v(" 内部会使用 "),a("code",[t._v("mergeOptions")]),t._v(" 进行选项的合并规范。我们都知道 "),a("code",[t._v("Vue")]),t._v(" 为我们提供了多种 "),a("code",[t._v("props")]),t._v(" 的写法，下面列出对应的写法即内部处理后的结果：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 一个数组")]),t._v("\nprops"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'size'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myMessage'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 合并处理后")]),t._v("\nprops"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  size"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  myMessage"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 带有类型")]),t._v("\nprops"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  size"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Number\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 合并处理后")]),t._v("\nprops"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  size"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Number "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 带有默认值")]),t._v("\nprops"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  size"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 合并处理后")]),t._v("\nprops"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  size"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("通过上面的分析，我们可以看出 "),a("code",[t._v("props")]),t._v(" 的属性的对应值最后都被处理为一个对象，借助于此我们可以修改其对应的 default 或者手动添加 default 属性值，而不用去考虑兼容多种 "),a("code",[t._v("props")]),t._v(" 的写法，这也是 "),a("code",[t._v("VueSetProps")]),t._v(" 必须在组件库注册后使用的原因。")]),t._v(" "),a("p",[t._v("知道了上面这些，最后就是找到组件对应的 prop 属性。我们都知道，"),a("code",[t._v("Vue")]),t._v(" 可以在组件自身中定义 "),a("code",[t._v("props")]),t._v(" 选项，也提供了通过 "),a("code",[t._v("mixins")]),t._v(" 方式来混入 "),a("code",[t._v("props")]),t._v(" 选项，其内部会对两者做一个合并处理。所以 "),a("code",[t._v("VueSetProps")]),t._v(" 内部在找对应的 prop 时会在组件本身 "),a("code",[t._v("props")]),t._v(" 选项以及 "),a("code",[t._v("mixins")]),t._v(" 选项中依次递归寻找，找到就修改或者设置其对应的 default 值，而对于设置的 defalut 类型是否符合类型，则交给 "),a("code",[t._v("Vue")]),t._v(" 后续运行时去校验。")]),t._v(" "),a("p",[t._v("通过以上方式就实现了对应组件库组件的初始化默认值的设置，一处设置，全局使用。")]),t._v(" "),a("p",[t._v("Chat: 现在对于设置的 prop，如果没有在对应组件选项中找到，则会被忽略掉且在非生产环境打印一个警告，对于此，想到的另一个点是把没有找到的 prop 挂载到对于到组件到 "),a("code",[t._v("$attrs")]),t._v(" 上，这样就能覆盖到更全的场景，但是 "),a("code",[t._v("$attrs")]),t._v(" 是在具体组件运行时处理的。所以对于此，如果你有好的 idea 或者好的实现方式，👏欢迎来提交 "),a("a",{attrs:{href:"https://github.com/markyong/vue-set-props/issues",target:"_blank",rel:"noopener noreferrer"}},[t._v("issue"),a("OutboundLink")],1),t._v("。")])])}),[],!1,null,null,null);s.default=n.exports}}]);